<$ {
authorx is a tool-chain for creating markdown-like languages.

<# { Why? }

While its nice to write simple documents in markdown, anything relatively sophisticated (e.g., blogs, interactive explanations, interactive computing notebooks) requires using and/or implementing ad-hoc extensions to markdown. Implementing and using these extensions is difficult because: 

<l {
<< { Markdown <a(https://roopc.net/posts/2014/markdown-cfg/) { has an ambiguous grammar } and therefore multiple implementations of parsing and rendering. }
<< { Not all programming languages have markdown parsers that offer extension points, and even when they do, those extension points often make it feel messier to write in markdown. }
<< { You can't arbitrarily nest tagged/transformed text in markdown, so it's inherently limited as a language. }
}

authorx makes it easy to create markdown-like languages that work for more complicated publishing formats.

<# { How? }

<## { Simple, unambiguous grammar }

There's only two syntactic elements to authorx documents: text and functions. Hello world looks like this:

<> {
  \<p {
    Hello, world!
  \}
}

You can see the grammar <a(./grammar.ne) { here }.

<## { Syntax is separate from semantics }

<## { Write semantics in any language }
  
}